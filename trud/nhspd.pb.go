// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nhspd.proto

/*
Package trud is a generated protocol buffer package.

It is generated from these files:
	nhspd.proto

It has these top-level messages:
	NHSPD
	Postcode
*/
package trud

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Postcode user type
type NHSPD_UserType int32

const (
	NHSPD_SMALL NHSPD_UserType = 0
	NHSPD_LARGE NHSPD_UserType = 1
)

var NHSPD_UserType_name = map[int32]string{
	0: "SMALL",
	1: "LARGE",
}
var NHSPD_UserType_value = map[string]int32{
	"SMALL": 0,
	"LARGE": 1,
}

func (x NHSPD_UserType) String() string {
	return proto.EnumName(NHSPD_UserType_name, int32(x))
}
func (NHSPD_UserType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Grid reference positional quality indicator
type NHSPD_GridReferenceQuality int32

const (
	NHSPD_UNKNOWN_GRID_REF_QUALITY NHSPD_GridReferenceQuality = 0
	NHSPD_WITHIN_BUILDING          NHSPD_GridReferenceQuality = 1
	NHSPD_WITHIN_BUILDING_FROM_MAP NHSPD_GridReferenceQuality = 2
	NHSPD_WITHIN_50_METRES         NHSPD_GridReferenceQuality = 3
	NHSPD_POSTCODE_UNIT_MEAN       NHSPD_GridReferenceQuality = 4
	NHSPD_IMPUTED_BY_ONS           NHSPD_GridReferenceQuality = 5
	NHSPD_POSTCODE_SECTOR_MEAN     NHSPD_GridReferenceQuality = 6
	NHSPD_TERMINATED_LAST_KNOWN    NHSPD_GridReferenceQuality = 8
	NHSPD_NO_GRID_REFERENCE        NHSPD_GridReferenceQuality = 9
)

var NHSPD_GridReferenceQuality_name = map[int32]string{
	0: "UNKNOWN_GRID_REF_QUALITY",
	1: "WITHIN_BUILDING",
	2: "WITHIN_BUILDING_FROM_MAP",
	3: "WITHIN_50_METRES",
	4: "POSTCODE_UNIT_MEAN",
	5: "IMPUTED_BY_ONS",
	6: "POSTCODE_SECTOR_MEAN",
	8: "TERMINATED_LAST_KNOWN",
	9: "NO_GRID_REFERENCE",
}
var NHSPD_GridReferenceQuality_value = map[string]int32{
	"UNKNOWN_GRID_REF_QUALITY": 0,
	"WITHIN_BUILDING":          1,
	"WITHIN_BUILDING_FROM_MAP": 2,
	"WITHIN_50_METRES":         3,
	"POSTCODE_UNIT_MEAN":       4,
	"IMPUTED_BY_ONS":           5,
	"POSTCODE_SECTOR_MEAN":     6,
	"TERMINATED_LAST_KNOWN":    8,
	"NO_GRID_REFERENCE":        9,
}

func (x NHSPD_GridReferenceQuality) String() string {
	return proto.EnumName(NHSPD_GridReferenceQuality_name, int32(x))
}
func (NHSPD_GridReferenceQuality) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1}
}

// Census enumeration district positional quality indicator
type NHSPD_CensusCodeQuality int32

const (
	NHSPD_UNKNOWN_CENSUS_QUALITY            NHSPD_CensusCodeQuality = 0
	NHSPD_POINT_IN_POLYGON                  NHSPD_CensusCodeQuality = 1
	NHSPD_NORTHERN_IRELAND                  NHSPD_CensusCodeQuality = 6
	NHSPD_SCOTLAND_CHANNELISLANDS_ISLEOFMAN NHSPD_CensusCodeQuality = 9
)

var NHSPD_CensusCodeQuality_name = map[int32]string{
	0: "UNKNOWN_CENSUS_QUALITY",
	1: "POINT_IN_POLYGON",
	6: "NORTHERN_IRELAND",
	9: "SCOTLAND_CHANNELISLANDS_ISLEOFMAN",
}
var NHSPD_CensusCodeQuality_value = map[string]int32{
	"UNKNOWN_CENSUS_QUALITY":            0,
	"POINT_IN_POLYGON":                  1,
	"NORTHERN_IRELAND":                  6,
	"SCOTLAND_CHANNELISLANDS_ISLEOFMAN": 9,
}

func (x NHSPD_CensusCodeQuality) String() string {
	return proto.EnumName(NHSPD_CensusCodeQuality_name, int32(x))
}
func (NHSPD_CensusCodeQuality) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

// NHSPD is the NHS postcode directory
// See https://isd.digital.nhs.uk/trud3/user/authenticated/group/0/pack/5/subpack/242/releases
//
type NHSPD struct {
	Postcode                 string                     `protobuf:"bytes,1,opt,name=postcode" json:"postcode,omitempty"`
	PostcodeEgif             string                     `protobuf:"bytes,2,opt,name=postcode_egif,json=postcodeEgif" json:"postcode_egif,omitempty"`
	DateIntroduction         string                     `protobuf:"bytes,3,opt,name=date_introduction,json=dateIntroduction" json:"date_introduction,omitempty"`
	DateTermination          string                     `protobuf:"bytes,4,opt,name=date_termination,json=dateTermination" json:"date_termination,omitempty"`
	OsEasting_100M           string                     `protobuf:"bytes,5,opt,name=os_easting_100m,json=osEasting100m" json:"os_easting_100m,omitempty"`
	OsNorthing_100M          string                     `protobuf:"bytes,6,opt,name=os_northing_100m,json=osNorthing100m" json:"os_northing_100m,omitempty"`
	County                   string                     `protobuf:"bytes,7,opt,name=county" json:"county,omitempty"`
	LocalAuthorityOrg        string                     `protobuf:"bytes,8,opt,name=local_authority_org,json=localAuthorityOrg" json:"local_authority_org,omitempty"`
	LocalAuthorityDistrict   string                     `protobuf:"bytes,9,opt,name=local_authority_district,json=localAuthorityDistrict" json:"local_authority_district,omitempty"`
	ElectoralWard            string                     `protobuf:"bytes,10,opt,name=electoral_ward,json=electoralWard" json:"electoral_ward,omitempty"`
	UserType                 NHSPD_UserType             `protobuf:"varint,11,opt,name=user_type,json=userType,enum=trud.NHSPD_UserType" json:"user_type,omitempty"`
	GridReferenceQuality     NHSPD_GridReferenceQuality `protobuf:"varint,12,opt,name=grid_reference_quality,json=gridReferenceQuality,enum=trud.NHSPD_GridReferenceQuality" json:"grid_reference_quality,omitempty"`
	Country                  string                     `protobuf:"bytes,13,opt,name=country" json:"country,omitempty"`
	HealthAuthorityPre_2013  string                     `protobuf:"bytes,14,opt,name=health_authority_pre_2013,json=healthAuthorityPre2013" json:"health_authority_pre_2013,omitempty"`
	Region                   string                     `protobuf:"bytes,15,opt,name=region" json:"region,omitempty"`
	HealthAuthorityPre_2002  string                     `protobuf:"bytes,16,opt,name=health_authority_pre_2002,json=healthAuthorityPre2002" json:"health_authority_pre_2002,omitempty"`
	NhsEnglandRegion         string                     `protobuf:"bytes,17,opt,name=nhs_england_region,json=nhsEnglandRegion" json:"nhs_england_region,omitempty"`
	CcgLhbChpLcgPhd          string                     `protobuf:"bytes,18,opt,name=ccg_lhb_chp_lcg_phd,json=ccgLhbChpLcgPhd" json:"ccg_lhb_chp_lcg_phd,omitempty"`
	Census_1991Ogss          string                     `protobuf:"bytes,19,opt,name=census_1991_ogss,json=census1991Ogss" json:"census_1991_ogss,omitempty"`
	Census_1991Code          string                     `protobuf:"bytes,20,opt,name=census_1991_code,json=census1991Code" json:"census_1991_code,omitempty"`
	CensusCodeQuality        NHSPD_CensusCodeQuality    `protobuf:"varint,21,opt,name=census_code_quality,json=censusCodeQuality,enum=trud.NHSPD_CensusCodeQuality" json:"census_code_quality,omitempty"`
	Ward_1998                string                     `protobuf:"bytes,22,opt,name=ward_1998,json=ward1998" json:"ward_1998,omitempty"`
	Census_2001Area          string                     `protobuf:"bytes,23,opt,name=census_2001_area,json=census2001Area" json:"census_2001_area,omitempty"`
	NhsEnglandRlo            string                     `protobuf:"bytes,24,opt,name=nhs_england_rlo,json=nhsEnglandRlo" json:"nhs_england_rlo,omitempty"`
	FormerPanSha             string                     `protobuf:"bytes,25,opt,name=former_pan_sha,json=formerPanSha" json:"former_pan_sha,omitempty"`
	Census_2001Lsoa          string                     `protobuf:"bytes,26,opt,name=census_2001_lsoa,json=census2001Lsoa" json:"census_2001_lsoa,omitempty"`
	Census_2001Rural         string                     `protobuf:"bytes,27,opt,name=census_2001_rural,json=census2001Rural" json:"census_2001_rural,omitempty"`
	Census_2001Msoa          string                     `protobuf:"bytes,28,opt,name=census_2001_msoa,json=census2001Msoa" json:"census_2001_msoa,omitempty"`
	FormerCancerNetwork      string                     `protobuf:"bytes,29,opt,name=former_cancer_network,json=formerCancerNetwork" json:"former_cancer_network,omitempty"`
	StrategicClinicalNetwork string                     `protobuf:"bytes,30,opt,name=strategic_clinical_network,json=strategicClinicalNetwork" json:"strategic_clinical_network,omitempty"`
	HealthAuthorityPre_2006  string                     `protobuf:"bytes,31,opt,name=health_authority_pre_2006,json=healthAuthorityPre2006" json:"health_authority_pre_2006,omitempty"`
	PctPre_2006              string                     `protobuf:"bytes,32,opt,name=pct_pre_2006,json=pctPre2006" json:"pct_pre_2006,omitempty"`
	ItClusterPre_2007        string                     `protobuf:"bytes,33,opt,name=it_cluster_pre_2007,json=itClusterPre2007" json:"it_cluster_pre_2007,omitempty"`
	WestminsterConsituency   string                     `protobuf:"bytes,34,opt,name=westminster_consituency,json=westminsterConsituency" json:"westminster_consituency,omitempty"`
	CancerRegistry           string                     `protobuf:"bytes,35,opt,name=cancer_registry,json=cancerRegistry" json:"cancer_registry,omitempty"`
	Pct                      string                     `protobuf:"bytes,36,opt,name=pct" json:"pct,omitempty"`
	OsEasting_1M             string                     `protobuf:"bytes,37,opt,name=os_easting_1m,json=osEasting1m" json:"os_easting_1m,omitempty"`
	OsNorthing_1M            string                     `protobuf:"bytes,38,opt,name=os_northing_1m,json=osNorthing1m" json:"os_northing_1m,omitempty"`
	Census_2011Area          string                     `protobuf:"bytes,39,opt,name=census_2011_area,json=census2011Area" json:"census_2011_area,omitempty"`
	Census_2011Lsoa          string                     `protobuf:"bytes,40,opt,name=census_2011_lsoa,json=census2011Lsoa" json:"census_2011_lsoa,omitempty"`
	Census_2011Msoa          string                     `protobuf:"bytes,41,opt,name=census_2011_msoa,json=census2011Msoa" json:"census_2011_msoa,omitempty"`
}

func (m *NHSPD) Reset()                    { *m = NHSPD{} }
func (m *NHSPD) String() string            { return proto.CompactTextString(m) }
func (*NHSPD) ProtoMessage()               {}
func (*NHSPD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NHSPD) GetPostcode() string {
	if m != nil {
		return m.Postcode
	}
	return ""
}

func (m *NHSPD) GetPostcodeEgif() string {
	if m != nil {
		return m.PostcodeEgif
	}
	return ""
}

func (m *NHSPD) GetDateIntroduction() string {
	if m != nil {
		return m.DateIntroduction
	}
	return ""
}

func (m *NHSPD) GetDateTermination() string {
	if m != nil {
		return m.DateTermination
	}
	return ""
}

func (m *NHSPD) GetOsEasting_100M() string {
	if m != nil {
		return m.OsEasting_100M
	}
	return ""
}

func (m *NHSPD) GetOsNorthing_100M() string {
	if m != nil {
		return m.OsNorthing_100M
	}
	return ""
}

func (m *NHSPD) GetCounty() string {
	if m != nil {
		return m.County
	}
	return ""
}

func (m *NHSPD) GetLocalAuthorityOrg() string {
	if m != nil {
		return m.LocalAuthorityOrg
	}
	return ""
}

func (m *NHSPD) GetLocalAuthorityDistrict() string {
	if m != nil {
		return m.LocalAuthorityDistrict
	}
	return ""
}

func (m *NHSPD) GetElectoralWard() string {
	if m != nil {
		return m.ElectoralWard
	}
	return ""
}

func (m *NHSPD) GetUserType() NHSPD_UserType {
	if m != nil {
		return m.UserType
	}
	return NHSPD_SMALL
}

func (m *NHSPD) GetGridReferenceQuality() NHSPD_GridReferenceQuality {
	if m != nil {
		return m.GridReferenceQuality
	}
	return NHSPD_UNKNOWN_GRID_REF_QUALITY
}

func (m *NHSPD) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *NHSPD) GetHealthAuthorityPre_2013() string {
	if m != nil {
		return m.HealthAuthorityPre_2013
	}
	return ""
}

func (m *NHSPD) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *NHSPD) GetHealthAuthorityPre_2002() string {
	if m != nil {
		return m.HealthAuthorityPre_2002
	}
	return ""
}

func (m *NHSPD) GetNhsEnglandRegion() string {
	if m != nil {
		return m.NhsEnglandRegion
	}
	return ""
}

func (m *NHSPD) GetCcgLhbChpLcgPhd() string {
	if m != nil {
		return m.CcgLhbChpLcgPhd
	}
	return ""
}

func (m *NHSPD) GetCensus_1991Ogss() string {
	if m != nil {
		return m.Census_1991Ogss
	}
	return ""
}

func (m *NHSPD) GetCensus_1991Code() string {
	if m != nil {
		return m.Census_1991Code
	}
	return ""
}

func (m *NHSPD) GetCensusCodeQuality() NHSPD_CensusCodeQuality {
	if m != nil {
		return m.CensusCodeQuality
	}
	return NHSPD_UNKNOWN_CENSUS_QUALITY
}

func (m *NHSPD) GetWard_1998() string {
	if m != nil {
		return m.Ward_1998
	}
	return ""
}

func (m *NHSPD) GetCensus_2001Area() string {
	if m != nil {
		return m.Census_2001Area
	}
	return ""
}

func (m *NHSPD) GetNhsEnglandRlo() string {
	if m != nil {
		return m.NhsEnglandRlo
	}
	return ""
}

func (m *NHSPD) GetFormerPanSha() string {
	if m != nil {
		return m.FormerPanSha
	}
	return ""
}

func (m *NHSPD) GetCensus_2001Lsoa() string {
	if m != nil {
		return m.Census_2001Lsoa
	}
	return ""
}

func (m *NHSPD) GetCensus_2001Rural() string {
	if m != nil {
		return m.Census_2001Rural
	}
	return ""
}

func (m *NHSPD) GetCensus_2001Msoa() string {
	if m != nil {
		return m.Census_2001Msoa
	}
	return ""
}

func (m *NHSPD) GetFormerCancerNetwork() string {
	if m != nil {
		return m.FormerCancerNetwork
	}
	return ""
}

func (m *NHSPD) GetStrategicClinicalNetwork() string {
	if m != nil {
		return m.StrategicClinicalNetwork
	}
	return ""
}

func (m *NHSPD) GetHealthAuthorityPre_2006() string {
	if m != nil {
		return m.HealthAuthorityPre_2006
	}
	return ""
}

func (m *NHSPD) GetPctPre_2006() string {
	if m != nil {
		return m.PctPre_2006
	}
	return ""
}

func (m *NHSPD) GetItClusterPre_2007() string {
	if m != nil {
		return m.ItClusterPre_2007
	}
	return ""
}

func (m *NHSPD) GetWestminsterConsituency() string {
	if m != nil {
		return m.WestminsterConsituency
	}
	return ""
}

func (m *NHSPD) GetCancerRegistry() string {
	if m != nil {
		return m.CancerRegistry
	}
	return ""
}

func (m *NHSPD) GetPct() string {
	if m != nil {
		return m.Pct
	}
	return ""
}

func (m *NHSPD) GetOsEasting_1M() string {
	if m != nil {
		return m.OsEasting_1M
	}
	return ""
}

func (m *NHSPD) GetOsNorthing_1M() string {
	if m != nil {
		return m.OsNorthing_1M
	}
	return ""
}

func (m *NHSPD) GetCensus_2011Area() string {
	if m != nil {
		return m.Census_2011Area
	}
	return ""
}

func (m *NHSPD) GetCensus_2011Lsoa() string {
	if m != nil {
		return m.Census_2011Lsoa
	}
	return ""
}

func (m *NHSPD) GetCensus_2011Msoa() string {
	if m != nil {
		return m.Census_2011Msoa
	}
	return ""
}

type Postcode struct {
	Postcode string `protobuf:"bytes,1,opt,name=postcode" json:"postcode,omitempty"`
}

func (m *Postcode) Reset()                    { *m = Postcode{} }
func (m *Postcode) String() string            { return proto.CompactTextString(m) }
func (*Postcode) ProtoMessage()               {}
func (*Postcode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Postcode) GetPostcode() string {
	if m != nil {
		return m.Postcode
	}
	return ""
}

func init() {
	proto.RegisterType((*NHSPD)(nil), "trud.NHSPD")
	proto.RegisterType((*Postcode)(nil), "trud.Postcode")
	proto.RegisterEnum("trud.NHSPD_UserType", NHSPD_UserType_name, NHSPD_UserType_value)
	proto.RegisterEnum("trud.NHSPD_GridReferenceQuality", NHSPD_GridReferenceQuality_name, NHSPD_GridReferenceQuality_value)
	proto.RegisterEnum("trud.NHSPD_CensusCodeQuality", NHSPD_CensusCodeQuality_name, NHSPD_CensusCodeQuality_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Trud service

type TrudClient interface {
	GetPostcode(ctx context.Context, in *Postcode, opts ...grpc.CallOption) (*NHSPD, error)
}

type trudClient struct {
	cc *grpc.ClientConn
}

func NewTrudClient(cc *grpc.ClientConn) TrudClient {
	return &trudClient{cc}
}

func (c *trudClient) GetPostcode(ctx context.Context, in *Postcode, opts ...grpc.CallOption) (*NHSPD, error) {
	out := new(NHSPD)
	err := grpc.Invoke(ctx, "/trud.Trud/GetPostcode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trud service

type TrudServer interface {
	GetPostcode(context.Context, *Postcode) (*NHSPD, error)
}

func RegisterTrudServer(s *grpc.Server, srv TrudServer) {
	s.RegisterService(&_Trud_serviceDesc, srv)
}

func _Trud_GetPostcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Postcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrudServer).GetPostcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trud.Trud/GetPostcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrudServer).GetPostcode(ctx, req.(*Postcode))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trud.Trud",
	HandlerType: (*TrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostcode",
			Handler:    _Trud_GetPostcode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nhspd.proto",
}

func init() { proto.RegisterFile("nhspd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x96, 0x5d, 0x6f, 0xdb, 0x36,
	0x14, 0x86, 0xeb, 0x36, 0x49, 0x13, 0xa6, 0x71, 0x64, 0xda, 0x49, 0xd9, 0xb4, 0xdd, 0x52, 0xf7,
	0x2b, 0xed, 0xba, 0xc0, 0x76, 0xb1, 0x7e, 0x00, 0xbb, 0x71, 0x6d, 0x35, 0x11, 0x66, 0x4b, 0xae,
	0x24, 0xaf, 0xe8, 0x15, 0xa1, 0xd2, 0x8c, 0x24, 0x4c, 0x96, 0x3c, 0x92, 0x46, 0xe1, 0xdb, 0xfd,
	0xad, 0xfd, 0xae, 0xdd, 0x0f, 0x24, 0x25, 0x47, 0xd1, 0xba, 0xdc, 0x89, 0xef, 0x79, 0x0e, 0x45,
	0x9d, 0xf3, 0xf2, 0x40, 0x60, 0x37, 0x8d, 0xf8, 0x62, 0x76, 0xba, 0x60, 0x99, 0xc8, 0xe0, 0x86,
	0x60, 0xcb, 0x59, 0xfb, 0xef, 0x06, 0xd8, 0xb4, 0xcf, 0xbd, 0xc9, 0x10, 0x1e, 0x81, 0xed, 0x45,
	0xc6, 0x05, 0xc9, 0x66, 0x14, 0xd5, 0x8e, 0x6b, 0x27, 0x3b, 0xee, 0x7a, 0x0d, 0x1f, 0x83, 0xbd,
	0xe2, 0x19, 0xd3, 0x30, 0xbe, 0x40, 0x37, 0x15, 0x70, 0xa7, 0x10, 0xcd, 0x30, 0xbe, 0x80, 0x3f,
	0x81, 0xc6, 0x2c, 0x10, 0x14, 0xc7, 0xa9, 0x60, 0xd9, 0x6c, 0x49, 0x44, 0x9c, 0xa5, 0xe8, 0x96,
	0x02, 0x0d, 0x19, 0xb0, 0x4a, 0x3a, 0x7c, 0x01, 0x94, 0x86, 0x05, 0x65, 0xf3, 0x38, 0x0d, 0x14,
	0xbb, 0xa1, 0xd8, 0x7d, 0xa9, 0xfb, 0x97, 0x32, 0x7c, 0x06, 0xf6, 0x33, 0x8e, 0x69, 0xc0, 0x45,
	0x9c, 0x86, 0xb8, 0xdb, 0xe9, 0xcc, 0xd1, 0xa6, 0x22, 0xf7, 0x32, 0x6e, 0x6a, 0x55, 0x8a, 0xf0,
	0x04, 0x18, 0x19, 0xc7, 0x69, 0xc6, 0x44, 0xb4, 0x06, 0xb7, 0x14, 0x58, 0xcf, 0xb8, 0x9d, 0xcb,
	0x8a, 0x3c, 0x04, 0x5b, 0x24, 0x5b, 0xa6, 0x62, 0x85, 0x6e, 0xab, 0x78, 0xbe, 0x82, 0xa7, 0xa0,
	0x99, 0x64, 0x24, 0x48, 0x70, 0xb0, 0x14, 0x51, 0xc6, 0x62, 0xb1, 0xc2, 0x19, 0x0b, 0xd1, 0xb6,
	0x82, 0x1a, 0x2a, 0xd4, 0x2f, 0x22, 0x0e, 0x0b, 0xe1, 0x3b, 0x80, 0xaa, 0xfc, 0x2c, 0xe6, 0x82,
	0xc5, 0x44, 0xa0, 0x1d, 0x95, 0x74, 0x78, 0x35, 0x69, 0x98, 0x47, 0xe1, 0x53, 0x50, 0xa7, 0x09,
	0x25, 0x22, 0x63, 0x41, 0x82, 0xbf, 0x05, 0x6c, 0x86, 0x80, 0xfe, 0xa4, 0xb5, 0xfa, 0x39, 0x60,
	0x33, 0xd8, 0x05, 0x3b, 0x4b, 0x4e, 0x19, 0x16, 0xab, 0x05, 0x45, 0xbb, 0xc7, 0xb5, 0x93, 0x7a,
	0xaf, 0x75, 0x2a, 0xfb, 0x76, 0xaa, 0x7a, 0x76, 0x3a, 0xe5, 0x94, 0xf9, 0xab, 0x05, 0x75, 0xb7,
	0x97, 0xf9, 0x13, 0xfc, 0x1d, 0x1c, 0x86, 0x2c, 0x9e, 0x61, 0x46, 0x2f, 0x28, 0xa3, 0x29, 0xa1,
	0xf8, 0xcf, 0x65, 0x90, 0xc4, 0x62, 0x85, 0xee, 0xa8, 0xfc, 0xe3, 0x72, 0xfe, 0x19, 0x8b, 0x67,
	0x6e, 0x01, 0x7e, 0xd2, 0x9c, 0xdb, 0x0a, 0xbf, 0xa3, 0x42, 0x04, 0x6e, 0xab, 0x2a, 0xb1, 0x15,
	0xda, 0x53, 0x47, 0x2d, 0x96, 0xf0, 0x3d, 0xb8, 0x17, 0xd1, 0x20, 0x11, 0x51, 0xa9, 0x0c, 0x0b,
	0x46, 0x71, 0xaf, 0xd3, 0x7d, 0x8d, 0xea, 0xba, 0x0c, 0x1a, 0x58, 0xd7, 0x61, 0xc2, 0xa8, 0x8c,
	0xca, 0x46, 0x30, 0x1a, 0xca, 0xde, 0xef, 0xeb, 0x46, 0xe8, 0xd5, 0x35, 0x5b, 0x76, 0x7a, 0xc8,
	0xf8, 0xff, 0x2d, 0x3b, 0x3d, 0xf8, 0x0a, 0xc0, 0x34, 0xe2, 0x98, 0xa6, 0x61, 0x12, 0xa4, 0xb2,
	0x0c, 0x6a, 0xfb, 0x86, 0xb6, 0x61, 0x1a, 0x71, 0x53, 0x07, 0x5c, 0xfd, 0xa2, 0x57, 0xa0, 0x49,
	0x48, 0x88, 0x93, 0xe8, 0x2b, 0x26, 0xd1, 0x02, 0x27, 0x24, 0xc4, 0x8b, 0x68, 0x86, 0xa0, 0x76,
	0x22, 0x21, 0xe1, 0x28, 0xfa, 0x3a, 0x88, 0x16, 0x23, 0x12, 0x4e, 0xa2, 0x99, 0x74, 0x18, 0xa1,
	0x29, 0x5f, 0x72, 0xdc, 0x7d, 0xff, 0xbe, 0x8b, 0xb3, 0x90, 0x73, 0xd4, 0xd4, 0x0e, 0xd3, 0xba,
	0x94, 0x9d, 0x90, 0xf3, 0x2a, 0xa9, 0x2e, 0x55, 0xab, 0x4a, 0x0e, 0xe4, 0xd5, 0x1a, 0x83, 0x66,
	0x4e, 0xaa, 0xdb, 0x55, 0x34, 0xeb, 0x40, 0x35, 0xeb, 0x61, 0xb9, 0x59, 0x03, 0x85, 0xc9, 0xa4,
	0xa2, 0x53, 0x0d, 0x52, 0x95, 0xe0, 0x7d, 0xb0, 0x23, 0xed, 0x24, 0x5f, 0xfb, 0x0e, 0x1d, 0xea,
	0x6b, 0x2c, 0x05, 0xb9, 0x2e, 0x9d, 0xaa, 0xd7, 0xe9, 0x74, 0x71, 0xc0, 0x68, 0x80, 0xee, 0x96,
	0x4f, 0x25, 0xe5, 0x3e, 0xa3, 0x81, 0xbc, 0x73, 0x57, 0xaa, 0x98, 0x64, 0x08, 0x69, 0x83, 0x96,
	0x4a, 0x98, 0x64, 0xf0, 0x09, 0xa8, 0x5f, 0x64, 0x6c, 0x4e, 0x19, 0x5e, 0x04, 0x29, 0xe6, 0x51,
	0x80, 0xee, 0xe9, 0xc9, 0xa0, 0xd5, 0x49, 0x90, 0x7a, 0x51, 0x50, 0x7d, 0x6f, 0xc2, 0xb3, 0x00,
	0x1d, 0x55, 0xdf, 0x3b, 0xe2, 0x59, 0x00, 0x5f, 0x82, 0x46, 0x99, 0x64, 0x4b, 0x16, 0x24, 0xe8,
	0x7e, 0xde, 0x8d, 0x35, 0xea, 0x4a, 0xb9, 0xba, 0xeb, 0x5c, 0xee, 0xfa, 0xa0, 0xba, 0xeb, 0x58,
	0xee, 0xda, 0x03, 0x07, 0xf9, 0x29, 0x49, 0x90, 0x12, 0xca, 0x70, 0x4a, 0xc5, 0xb7, 0x8c, 0xfd,
	0x81, 0x1e, 0x2a, 0xbc, 0xa9, 0x83, 0x03, 0x15, 0xb3, 0x75, 0x08, 0xfe, 0x0a, 0x8e, 0xb8, 0x60,
	0x81, 0xa0, 0x61, 0x4c, 0x30, 0x49, 0xe2, 0x34, 0x96, 0x17, 0xbd, 0x48, 0xfc, 0x41, 0x25, 0xa2,
	0x35, 0x31, 0xc8, 0x81, 0x22, 0xfb, 0x1a, 0x03, 0xbf, 0x41, 0x3f, 0x5e, 0x63, 0xe0, 0x37, 0xf0,
	0x18, 0xdc, 0x59, 0x10, 0x71, 0x49, 0x1f, 0x2b, 0x1a, 0x2c, 0x88, 0x28, 0x88, 0x9f, 0x41, 0x33,
	0x16, 0x98, 0x24, 0x4b, 0x2e, 0x64, 0xe1, 0x35, 0xf8, 0x16, 0x3d, 0xd2, 0x1e, 0x8f, 0xc5, 0x40,
	0x47, 0x34, 0xfe, 0x16, 0xbe, 0x05, 0x77, 0xbf, 0x51, 0x2e, 0xe6, 0x71, 0xaa, 0x78, 0x92, 0xa5,
	0x3c, 0x16, 0x4b, 0x9a, 0x92, 0x15, 0x6a, 0xeb, 0x93, 0x94, 0xc2, 0x83, 0xcb, 0x28, 0x7c, 0x0e,
	0xf6, 0xf3, 0x7a, 0xc9, 0x5b, 0xc4, 0xe5, 0xd5, 0x7f, 0x9c, 0xd7, 0x57, 0xc9, 0x6e, 0xae, 0x42,
	0x03, 0xdc, 0x5a, 0x10, 0x81, 0x9e, 0xa8, 0xa0, 0x7c, 0x84, 0x6d, 0xb0, 0x57, 0x9e, 0xd9, 0x73,
	0xf4, 0x54, 0xc5, 0x76, 0x2f, 0x27, 0xf6, 0x5c, 0x7a, 0xe7, 0xca, 0xbc, 0x9e, 0xa3, 0x67, 0xda,
	0x3b, 0xa5, 0x69, 0x3d, 0xbf, 0xd2, 0xe5, 0x6e, 0xee, 0xd9, 0xe7, 0x57, 0xbb, 0xdc, 0xd5, 0x9e,
	0xad, 0x90, 0xca, 0x65, 0x27, 0x55, 0x52, 0xb9, 0xac, 0x42, 0x2a, 0xe7, 0xbc, 0xa8, 0x92, 0xd2,
	0x39, 0xed, 0x63, 0xb0, 0x5d, 0xcc, 0x58, 0xb8, 0x03, 0x36, 0xbd, 0x71, 0x7f, 0x34, 0x32, 0x6e,
	0xc8, 0xc7, 0x51, 0xdf, 0x3d, 0x33, 0x8d, 0x5a, 0xfb, 0x9f, 0x1a, 0x68, 0x7d, 0x6f, 0x8c, 0xc2,
	0x07, 0x00, 0x4d, 0xed, 0xdf, 0x6c, 0xe7, 0xb3, 0x8d, 0xcf, 0x5c, 0x6b, 0x88, 0x5d, 0xf3, 0x23,
	0xfe, 0x34, 0xed, 0x8f, 0x2c, 0xff, 0x8b, 0x71, 0x03, 0x36, 0xc1, 0xfe, 0x67, 0xcb, 0x3f, 0xb7,
	0x6c, 0xfc, 0x61, 0x6a, 0x8d, 0x86, 0x96, 0x7d, 0x66, 0xd4, 0x64, 0x4a, 0x45, 0xc4, 0x1f, 0x5d,
	0x67, 0x8c, 0xc7, 0xfd, 0x89, 0x71, 0x13, 0xb6, 0x80, 0x91, 0x47, 0x7f, 0xe9, 0xe0, 0xb1, 0xe9,
	0xbb, 0xa6, 0x67, 0xdc, 0x82, 0x87, 0x00, 0x4e, 0x1c, 0xcf, 0x1f, 0x38, 0x43, 0x13, 0x4f, 0x6d,
	0xcb, 0xc7, 0x63, 0xb3, 0x6f, 0x1b, 0x1b, 0x10, 0x82, 0xba, 0x35, 0x9e, 0x4c, 0x7d, 0x73, 0x88,
	0x3f, 0x7c, 0xc1, 0x8e, 0xed, 0x19, 0x9b, 0x10, 0x81, 0xd6, 0x9a, 0xf5, 0xcc, 0x81, 0xef, 0xb8,
	0x9a, 0xde, 0x82, 0xf7, 0xc0, 0x81, 0x6f, 0xba, 0x63, 0xcb, 0xee, 0xcb, 0x84, 0x51, 0xdf, 0xf3,
	0xb1, 0x3a, 0xba, 0xb1, 0x0d, 0x0f, 0x40, 0xc3, 0x76, 0xd6, 0x9f, 0x60, 0xba, 0xa6, 0x3d, 0x30,
	0x8d, 0x9d, 0xf6, 0x5f, 0x35, 0xd0, 0xf8, 0xcf, 0x44, 0x82, 0x47, 0xe0, 0xb0, 0xf8, 0xe8, 0x81,
	0x69, 0x7b, 0x53, 0xaf, 0xf4, 0xc9, 0x2d, 0x60, 0x4c, 0x1c, 0xcb, 0xf6, 0xb1, 0x65, 0xe3, 0x89,
	0x33, 0xfa, 0x72, 0xe6, 0xd8, 0x46, 0x4d, 0xaa, 0xb6, 0xe3, 0xfa, 0xe7, 0xa6, 0x6b, 0x63, 0xcb,
	0x35, 0x47, 0x7d, 0x7b, 0x68, 0x6c, 0xc1, 0xa7, 0xe0, 0x91, 0x37, 0x70, 0x7c, 0xb9, 0xc2, 0x83,
	0xf3, 0xbe, 0x6d, 0x9b, 0x23, 0xcb, 0x93, 0x2b, 0x0f, 0x5b, 0xde, 0xc8, 0x74, 0x3e, 0x8e, 0xfb,
	0xb6, 0xb1, 0xd3, 0x7e, 0x06, 0xb6, 0x27, 0xc5, 0x3f, 0xca, 0x35, 0xff, 0x2f, 0xbd, 0x1e, 0xd8,
	0xf0, 0xd9, 0x72, 0x06, 0x5f, 0x82, 0xdd, 0x33, 0x2a, 0xd6, 0x29, 0x75, 0x3d, 0x5e, 0x8b, 0xf5,
	0xd1, 0x6e, 0x69, 0xdc, 0x7e, 0xdd, 0x52, 0xbf, 0x49, 0xaf, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xf7, 0x16, 0x87, 0xd8, 0x35, 0x09, 0x00, 0x00,
}
